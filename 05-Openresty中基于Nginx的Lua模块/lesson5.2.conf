
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/palin;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  10;

    #gzip  on;
  
    upstream mem_stream{
        server 127.0.0.1:11211;
        keepalive 1024;
    } 
   
    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
    
        location /test_mm {
            set $memc_cmd $arg_cmd;
            set $memc_key $arg_key;
            memc_pass mem_stream;
        }
      
        location ~ .\.conf$ {
           root conf_bak;
        }
        
        location /cjson {
           content_by_lua_block {
              local cjson=require("cjson")
              --local a={1,2,a="mm",b={"c",2}}
              --local bb='[{"a":4}]'
              --ngx.say(cjson.encode(a))
              --bbb = cjson.decode(bb)
              --local result = pcall(function (str) json_val = cjson.decode(str) end,bb)
              --ngx.say(json_val[1]["a"])
              --ngx.say(bbb[1]['a'])
              cjson.encode_empty_table_as_object(false)
              ngx.say(cjson.encode({}))
           }
        }
    
        location /test {
           #lua_need_request_body on;
           content_by_lua_block {
              local a=ngx.req.get_uri_args()
              ngx.say(a['a'])
              ngx.say(a['b'])
              ngx.req.read_body()
              local post_args = ngx.req.get_post_args()
              ngx.print(post_args['m'])
              ngx.print(post_args['n'])
              ngx.say(ngx.req.get_body_data())
           }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
